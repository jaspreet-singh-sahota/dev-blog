require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ArticlesController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:user) { User.create!(name: 'jaspreet') }
  let(:image) { FactoryBotRails.create(:image, image: 'image.pgn') }
  let(:valid_attributes) do
    { title: 'testing for rspec', text: 'testing for rspec', image: 'random.png' }
  end

  let(:invalid_attributes) do
    { title: 'testing for rspec', text: 'testing for rspec', image: 'random.png' }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ArticlesController. Be sure to keep this updated too.
  let(:valid_session) { { user: :user } }

  describe 'GET #new' do
    it 'renders the new articles page' do
      get :new
      expect(response).not_to render_template('new')
      expect(response).to have_http_status(302)
    end
  end

  describe 'GET #index' do
    it 'inavadates the worng params' do
      @category = Article.new invalid_attributes
      @category.save
      get :index, params: {}, session: valid_session
      expect(response).not_to be_successful
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: { id: 1 }, session: valid_session
      expect(response).not_to render_template('show')
    end
  end
end
